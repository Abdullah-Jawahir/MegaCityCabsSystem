package com.system.service;

import com.system.controller.BookingController;
import com.system.dao.BillDAO;
import com.system.model.Bill;
import com.system.model.Booking;
import com.system.model.User;

import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

public class BillService {

    private BillDAO billDAO;
    private BookingService bookingService;
    private static final Logger logger = Logger.getLogger(BillService.class.getName());
    private static final float TAX_RATE = 0.10f; // 10% tax
    private static final float RATE_PER_KM = 5.0f;

    public BillService() {
        billDAO = new BillDAO();
        bookingService = new BookingService();
    }

    // Method to create a new bill
    public boolean createBill(Bill bill) {
        return billDAO.createBill(bill);
    }

    // Method to get a bill by its ID
    public Bill getBillById(String billId) {
        return billDAO.getBillById(billId);
    }

    // Method to get all bills
    public List<Bill> getAllBills() {
        return billDAO.getAllBills();
    }

    // Method to update the status of a bill
    public boolean updateBillStatus(String billId, String status) {
        return billDAO.updateBillStatus(billId, status);
    }

    // Method to delete a bill by its ID
    public boolean deleteBill(String billId) {
        return billDAO.deleteBill(billId);
    }

    // Additional method to get all bills for a specific user (generated by)
    public List<Bill> getBillsByUser(User user) {
        List<Bill> allBills = billDAO.getAllBills();
        allBills.removeIf(bill -> !bill.getGeneratedBy().equals(user));
        return allBills;
    }
    
    // Updated method signature to accept the user
    public boolean generateBill(String bookingId, User generatedByUser) {
        try {
            // Get the booking details
            Booking booking = bookingService.getBookingById(bookingId);
            
            if (booking == null) {
                return false;
            }
            
            // Calculate amounts
            float baseAmount = calculateBaseAmount(booking.getDistance());
            float taxAmount = calculateTaxAmount(baseAmount);
            float totalAmount = baseAmount + taxAmount;
            
            // Generate unique bill ID
            String billId = "BILL" + System.currentTimeMillis();
            
         // Check if the user parameter is null
            if (generatedByUser == null) {
                logger.log(Level.SEVERE, "User is null in generateBill method");
                return false;
            }
            else
                logger.log(Level.SEVERE, "User is" + generatedByUser.getName());
            
            // Use the passed-in user
            Bill bill = new Bill(
                billId,
                booking,
                baseAmount,
                taxAmount,
                totalAmount,
                "pending",
                generatedByUser 
            );
            
            return createBill(bill);
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    
    public Bill getBillByBookingId(String bookingId) {
        return billDAO.getBillByBookingId(bookingId);
    }

    public boolean updateBill(Bill bill) {
        return billDAO.updateBill(bill);
    }

    public float calculateBaseAmount(float distance) {
        return distance * RATE_PER_KM;
    }

    public float calculateTaxAmount(float baseAmount) {
        return baseAmount * TAX_RATE;
    }

    public Bill recalculateBill(Bill existingBill, Booking updatedBooking) {
        float baseAmount = calculateBaseAmount(updatedBooking.getDistance());
        float taxAmount = calculateTaxAmount(baseAmount);
        float totalAmount = baseAmount + taxAmount;

        existingBill.setBaseAmount(baseAmount);
        existingBill.setTaxAmount(taxAmount);
        existingBill.setTotalAmount(totalAmount);
        existingBill.setBooking(updatedBooking);

        return existingBill;
    }
}
